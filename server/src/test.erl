-module(test).
-include("holdem.hrl").
-export([test_add_player/0, test_join_leave/0]).
%% test_add_player
test_add_player() ->
  Game = game:new(),
  {waiting, {state, [], []}} = Game:dump(),
  ok = Game:add_player(a),
  {waiting, {state, [a], []}} = Game:dump(),
  ok = Game:add_player(b),
  {preflop, {state, [], [b, a]}} = Game:dump(),
  ok = Game:add_player(c),
  {preflop, {state, [c], [b, a]}} = Game:dump(),
  ok = Game:add_player(d),
  {preflop, {state, [d, c], [b, a]}} = Game:dump(),
  ok = Game:add_player(e),
  {preflop, {state, [e, d, c], [b, a]}} = Game:dump(),
  ok = Game:add_player(f),
  {preflop, {state, [f, e, d, c], [b, a]}} = Game:dump(),
  ok = Game:add_player(g),
  {preflop, {state, [g, f, e, d, c], [b, a]}} = Game:dump(),
  ok = Game:add_player(h),
  {preflop, {state, [h, g, f, e, d, c], [b, a]}} = Game:dump(),
  ok = Game:add_player(i),
  {preflop, {state, [i, h, g, f, e, d, c], [b, a]}} = Game:dump(),
  ok = Game:add_player(j),
  {preflop, {state, [j, i, h, g, f, e, d, c], [b, a]}} = Game:dump(),
  full = Game:add_player(k),
  {preflop, {state, [j, i, h, g, f, e, d, c], [b, a]}} = Game:dump(),
  Game:stop().

test_join_leave() ->
  P1 = player:new(),
  P2 = player:new(),
  P3 = player:new(),
  G = game:new(),
  P1:join(G),
  {waiting, {state,[P1], []}} = G:dump(),
  {playing, {state, G}} = P1:dump(),
  P2:join(G),
  {preflop, {state,[], [P2, P1]}} = G:dump(),
  {playing, {state, G}} = P2:dump(),
  P3:join(G),
  {preflop, {state,[P3], [P2, P1]}} = G:dump(),
  {playing, {state, G}} = P3:dump(),
  ok = P3:leave(),
  ok = P2:leave(),
  ok = P1:leave(),
  G:stop(),
  P3:stop(),
  P2:stop(),
  P1:stop().
